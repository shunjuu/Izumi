# This is the port the application will listen on.
# [type: Integer]
# Automatically set to 80 if Docker is active
listen-port: 8080

# Authorization files must be stored locally

# You can optionally load a global config from a web source
# If you do not, leave this as an empty string
# [type: string]
web-config: ""

# Grouping body for notification specifics
notification:

  # How many notification jobs should be run at one given time 
  # For notifications, this probably doesn't need to be higher than 1 or 2
  # [type: Integer]
  jobs: 1

  # Notifications can be optionally filtered based on given anilist or mal profiles
  # If a given show is found on any provided profile (inclusive or), it is considered
  # currently watching. 
  filters:

    # For all filters, leave as an empty string if not being used
    # The string should be the username as it appears on the site
    # e.g., "anilist: 'anilist_user'"

    anilist: ""
    myanimelist: ""

# Grouping body for ALL module output notifications
modules:

  # Grouping body for Discord webhooks
  # Key 'template' is an optional parameter, defaults to 1
  # If none are used, leave as an empty list []
  discord-webhook:
    - name: "zenbu"
      url: "https://discord.webhook.url/identifier"
      template: 1

# Modules, but for developer use
dev:

  # See: discord-webhook above, but this is not a list
  discord-webhook:
    name: "dev"
    url: "https://dev.discord.webhook.url/identifier"
    template: 1

# Grouping body to list endpoints for other Izumi modules for this app to talk to.
endpoints:

  # All modules use and accept the same formatted request
  # Thus, there is no need to "group" each type of request

  # [always] URLs will always be POST'd, regardless of the response
  # To have no URLs in this list, use an empty list, i.e.:
  # always: []
  always:
    - url: "https://endpoint1.url/notify"
      auth: "authorization_key1"
    - url: "https://endpoint2.url/encode"
    - url: "https://endpoint3.url/distribute"

  # [sequential] URLs are sorted into groups.
  # For each group, the URLs will be tested in order until one of them succeeds.
  # All the groups will be tested.
  # To specify no groups, use an empty dict, i.e.:
  # sequential: {}
  sequential:
    group1:
      - url: "https://endpoint1.url/notify"
        auth: "authorization_key1"
      - url: "https://endpoint2.url/notify"
    group2:
      - url: "https://endpoint3.url/distribute"
      

# Application-specifc settings
system:

  # For testing, you can enable a "dev" setting that sends requests to 
  # an alternative "dev" grouping of settings instead
  use-dev: no

  # The identifier for this system
  # [type: String]
  name: "izumi"

  # Whether or not hte application should print more information
  # [type: Boolean]
  verbose: yes

  # Logging settings
  logging:

    # The style of the log output messages, using %(var)s style
    logfmt: "[%(name)s] (%(levelname)s) %(asctime)s: %(message)s"
    # The strftime-style format for %(asctime)s
    datefmt: "%a|%b%y %X %Z"
